/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'chauhraj' at '3/18/16 3:37 AM' with Gradle 2.12
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.12/userguide/tutorial_java_projects.html
 */

/*
// Apply the java plugin to add support for Java
apply plugin: 'java'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.18'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}
*/
group 'com.github.chauhraj'
version '1.0-SNAPSHOT'

apply plugin: 'java'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

task newProblem(description: "Creates Solution class and Test for a given Leetcode Problem Id") {

    doLast {
        def pkgName = "${project.group}.leetcode.pb${leetId}"
        def path = pkgName.replace(".", "/")
        def source = file("src/main/java/$path/Solution.java")
        def testSource = file("src/test/java/$path/SolutionTest.java")
        def problemClass = """
package ${project.group}.leetcode.pb${leetId};

public class Solution {
    public $outputType $method($inputType input) {
         $outputType result ;
         return result;
    }
}
        """
        source.getParentFile().mkdirs()
        FileWriter w1 = new FileWriter(source)
        w1.write(problemClass)
        w1.close()

        println "Creating File $source successfully"

        def testClass = """
package ${project.group}.leetcode.pb${leetId};

import static org.hamcrest.CoreMatchers.*;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;

import java.util.*;

import static org.junit.Assert.*;

@RunWith(Parameterized.class)
public class SolutionTest {
    private $inputType input;
    private $outputType expected;
    public SolutionTest($inputType input, $outputType expected) {
        this.input = input;
        this.expected = expected;
    }

    @Parameterized.Parameters
    public static Collection<Object[]> data() {
        return Arrays.asList(new Object[][]{
        });
    }

    @Test
    public void execute${method}Test() {
        Solution solution = new Solution();
        assertThat(solution.$method(input), is(expected));
    }

}
        """
        testSource.getParentFile().mkdirs()
        FileWriter w2 = new FileWriter(testSource)
        w2.write(testClass)
        w2.close()
        println "Created test class file $testSource successfully"
    }
}

dependencies {
    testCompile "org.apache.commons:commons-math3:3.5"
    testCompile "org.apache.commons:commons-collections4:4.1"
    testCompile group: 'junit', name: 'junit', version: '4.11'
}
